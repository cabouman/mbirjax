# -*- coding: utf-8 -*-
"""demo_4_wrong_rotation_direction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gd-fMm3XK1WBsuJUklHdZ-4jjsvdpeIT

**MBIRJAX: Wrong Rotation Direction Demo**

See the [MBIRJAX documentation](https://mbirjax.readthedocs.io/en/latest/) for an overview and details.  

This script demonstrates the effects of an incorrect rotation direction when using cone beam projection.  

For this demo, we do a baseline reconstruction with the correct specification of angles, then reverse the order of the angles and perform another reconstruction.  

Since this problem doesn't arise with parallel beam because of symmetry, we show this only for cone beam.   

See [demo_1_shepp_logan.py](https://colab.research.google.com/drive/1zG_H6CDjuQxeMRQHan3XEyX2YVKcSSNC) for the basic steps of synthetic sinogram generation and reconstruction.

Select a GPU as runtime type for best performance.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install mbirjax

import numpy as np
import pprint
import time
import jax.numpy as jnp
import mbirjax

"""**Set the geometry parameters**"""

# Set parameters for the problem size.
num_views = 64
num_det_rows = 40
num_det_channels = 128

sharpness = 0.0

# For cone beam geometry, we need to describe the distances source to detector and source to rotation axis.
# np.Inf is an allowable value, in which case this is essentially parallel beam
source_detector_dist = 4 * num_det_channels
source_iso_dist = source_detector_dist

# For cone beam reconstruction, we need a little more than 180 degrees for full coverage.
detector_cone_angle = 2 * np.arctan2(num_det_channels / 2, source_detector_dist)
start_angle = -(np.pi + detector_cone_angle) * (1/2)
end_angle = (np.pi + detector_cone_angle) * (1/2)

"""**Data generation:** For demo purposes, we create a phantom and then project it to create a sinogram.

For this demo we use the default recon shape for cone beam.

Note:  the sliders on the viewer won't work in notebook form.  For that you'll need to run the python code with an interactive matplotlib backend, typcially using the command line or a development environment like Spyder or Pycharm to invoke python.  

"""

# Initialize sinogram
sinogram_shape = (num_views, num_det_rows, num_det_channels)
angles = jnp.linspace(start_angle, end_angle, num_views, endpoint=False)

ct_model_for_generation = mbirjax.ConeBeamModel(sinogram_shape, angles,
                                                source_detector_dist, source_iso_dist)

# Generate 3D Shepp Logan phantom
print('Creating phantom')
phantom = ct_model_for_generation.gen_modified_3d_sl_phantom()

# Generate synthetic sinogram data
print('Creating sinogram')
sinogram = ct_model_for_generation.forward_project(phantom)
sinogram = np.array(sinogram)

# View sinogram
title='Original sinogram'
mbirjax.slice_viewer(sinogram, title=title, slice_axis=0, slice_label='View')

"""**Do a baseline reconstruction**

Here we do a standard reconstruction with the correct specification of angles.  
"""

print('\nStarting recon with correct rotation\n')
ct_model_for_recon = mbirjax.ConeBeamModel(sinogram_shape, angles, source_detector_dist=source_detector_dist,
                                            source_iso_dist=source_iso_dist)
ct_model_for_recon.set_params(sharpness=sharpness)

recon_correct, recon_params_correct = ct_model_for_recon.recon(sinogram)

pprint.pprint(recon_params_correct._asdict(), compact=True)

"""**Do a reconstruction with angles in reverse order.**"""

print('\nStarting recon with incorrect rotation\n')
angles_reversed = angles[::-1]
ct_model_for_recon = mbirjax.ConeBeamModel(sinogram_shape, angles_reversed, source_detector_dist=source_detector_dist,
                                            source_iso_dist=source_iso_dist)
recon_incorrect, recon_params_incorrect = ct_model_for_recon.recon(sinogram)

pprint.pprint(recon_params_incorrect._asdict(), compact=True)

"""**Display the results with correct and incorrect angles.**"""

title = 'Correct rotation recon (left) vs incorrect rotation recon (right)'
title += '\nThe incorrect angle specification leads to shape distortion and top/bottom reflection.'
mbirjax.slice_viewer(recon_correct, recon_incorrect, title=title, vmin=0.0, vmax=1.0)

"""**Next:** Try changing some of the parameters and re-running or try [some of the other demos](https://mbirjax.readthedocs.io/en/latest/demos_and_faqs.html).  """